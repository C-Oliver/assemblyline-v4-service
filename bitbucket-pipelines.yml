
options:
  max-time: 5

pipelines:
  default:
    - parallel:
      - step:
          name: Build & Test 3.7
          image: python:3.7
          caches: &caches
            - pip
          script: &build_test
            - apt-get update
            - apt-get install -y build-essential libffi-dev libfuzzy-dev python3-dev
            - mkdir -p /etc/assemblyline/
            - mkdir -p /var/cache/assemblyline/
            - cp test/bitbucket/config.yml /etc/assemblyline
            - pip install --no-cache-dir -r test/requirements.txt
            - pip install --no-cache-dir -e .
            # - pytest -rsx -vv
#      - step:
#          name: Build & Test 3.8
#          image: python:3.8-rc
#          caches: *caches
#          script: *build_test
  tags:
    v*:
      - step:
          name: Build Package
          image: python:3.7
          script:
            - pip install --no-cache-dir wheel
            - python setup.py bdist_wheel
            - ls dist/
          artifacts:
            - dist/*
      - parallel:
        - step:
            name: Test 3.7
            image: python:3.7
            script: &deploy_test
              - rm -rf assemblyline_v4_service setup.py  # Make sure we are running on the package from the prior build
              - apt-get update
              - apt-get install -y build-essential libffi-dev libfuzzy-dev python3-dev
              - pip install --no-cache-dir -f dist assemblyline-service-client
              - mkdir -p /etc/assemblyline/
              - mkdir -p /var/cache/assemblyline/
              - cp test/bitbucket/config.yml /etc/assemblyline
              - pip install --no-cache-dir -r test/requirements.txt
              #- pytest -rsx -vv
#        - step:
#            name: Test 3.8
#            image: python:3.8-rc
#            script: *deploy_test
#            caches: *caches
#            services: *services
      - step:
          name: Deploy to Test PyPI
          image: python:3.7
          deployment: test_pypi
          script:
            - pip install --no-cache-dir twine
            - ls dist
            - twine upload --skip-existing --repository-url $TEST_REPOSITORY_URL dist/*
      - step:
          name: Deploy to PyPI
          image: python:3.7
          deployment: pypi
          script:
            - pip install --no-cache-dir twine
            - ls dist
            - twine upload --skip-existing dist/*
      - step:
          name: Deploy to Docker Hub
          image: python:3.7
          services: [docker]
          deployment: container
          script:
            - export TAG=${BITBUCKET_TAG#v}
            - until pip install --no-cache-dir assemblyline-v4-service== 2>&1 | grep -q $TAG; do sleep 2; done
            - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
            - docker build --build-arg version=$TAG -t cccs/assemblyline-v4-service-base:$TAG -t cccs/assemblyline-v4-service-base:latest docker
            - docker build --build-arg version=$TAG -f assemblyline_result_sample_service/Dockerfile -t cccs/assemblyline-service-resultsample:$TAG -t cccs/assemblyline-service-resultsample:latest .
            - docker push cccs/assemblyline-v4-service-base
            - docker push cccs/assemblyline-service-resultsample
